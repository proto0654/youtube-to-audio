import os
import time
import logging
import shutil
from pathlib import Path

logger = logging.getLogger(__name__)

def force_cleanup_downloads_folder():
    """Принудительная очистка папки загрузок"""
    downloads_dir = "downloads"
    
    # Проверяем наличие директории
    if not os.path.exists(downloads_dir):
        os.makedirs(downloads_dir)
        logger.info(f"Создана директория {downloads_dir}")
        return
    
    # Получаем список файлов
    files = os.listdir(downloads_dir)
    
    if not files:
        logger.info("Файлов для очистки не найдено")
        return
    
    # Удаляем все файлы
    for file in files:
        file_path = os.path.join(downloads_dir, file)
        try:
            if os.path.isfile(file_path):
                os.unlink(file_path)
            elif os.path.isdir(file_path):
                shutil.rmtree(file_path)
        except Exception as e:
            logger.error(f"Ошибка при удалении {file_path}: {e}")
    
    logger.info(f"Очищено {len(files)} файлов из директории {downloads_dir}")

def cleanup_old_downloads(max_age_minutes=30):
    """Очистка старых загрузок"""
    downloads_dir = "downloads"
    current_time = time.time()
    max_age_seconds = max_age_minutes * 60
    
    # Проверяем наличие директории
    if not os.path.exists(downloads_dir):
        return
    
    # Получаем список файлов
    files = os.listdir(downloads_dir)
    old_files = []
    
    for file in files:
        file_path = os.path.join(downloads_dir, file)
        if os.path.isfile(file_path):
            file_age = current_time - os.path.getmtime(file_path)
            if file_age > max_age_seconds:
                old_files.append(file_path)
    
    if not old_files:
        logger.info("Старых файлов для очистки не найдено")
        return
    
    # Удаляем старые файлы
    for file_path in old_files:
        try:
            os.unlink(file_path)
        except Exception as e:
            logger.error(f"Ошибка при удалении {file_path}: {e}")
    
    logger.info(f"Очищено {len(old_files)} старых файлов из директории {downloads_dir}")

def download_audio(youtube_url):
    """Имитация загрузки аудио с YouTube"""
    logger.info(f"Начинаю скачивание аудио из: {youtube_url}")
    
    # В реальности, здесь будет код для использования yt-dlp
    # Сейчас просто имитируем успешную загрузку
    
    # Создаем файл-заглушку
    audio_file = os.path.join("downloads", f"audio_dummy_{int(time.time())}.mp3")
    
    with open(audio_file, "w") as f:
        f.write("Dummy audio file")
    
    logger.info(f"Аудио успешно скачано: {audio_file}")
    return audio_file 